generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// *
///  * =========================
///  * Usuarios y relaciones
///  * =========================
model User {
  id               String             @id @default(cuid())
  name             String?
  email            String             @unique
  passwordHash     String?            @map("password_hash")
  phone            String?
  company          String?
  address          String?
  city             String?
  state            String?
  zip              String?
  role             UserRole           @default(CLIENT)
  isActive         Boolean?           @map("is_active")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  assignedSellerId String?            @map("assigned_seller_id")
  AnalyticsEvent   AnalyticsEvent[]
  orders           Order[]            @relation("ClientOrders")
  salesOrders      Order[]            @relation("SellerOrders")
  SearchLandingHit SearchLandingHit[]
  SearchQueryLog   SearchQueryLog[]
  assignedSeller   User?              @relation("SellerClients", fields: [assignedSellerId], references: [id])
  clients          User[]             @relation("SellerClients")

  @@map("User")
}

model Brand {
  id        String   @id @default(cuid())
  code      Int?     @unique
  name      String
  slug      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  products Product[]

  @@map("Brand")
}

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  parentId  String?    @map("parent_id")
  createdAt DateTime   @default(now()) @map("created_at")
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]

  @@map("Category")
}

model Product {
  id                 String                   @id @default(cuid())
  sku                String?                  @unique
  name               String
  slug               String                   @unique
  brandId            String?                  @map("brand_id")
  categoryId         String?                  @map("category_id")
  description        String?
  attributes         Json?
  unit               String?
  priceBase          Decimal                  @map("price_base")
  currency           String                   @default("ARS")
  taxRate            Decimal?                 @map("tax_rate")
  stockQty           Decimal?                 @map("stock_qty")
  isActive           Boolean                  @default(true) @map("is_active")
  createdAt          DateTime                 @default(now()) @map("created_at")
  updatedAt          DateTime                 @default(now()) @map("updated_at")
  // searchVector removed for SQLite compatibility
  AnalyticsEvent     AnalyticsEvent[]
  ExternalProductMap ExternalProductMap[]
  brand              Brand?                   @relation(fields: [brandId], references: [id])
  category           Category?                @relation(fields: [categoryId], references: [id])
  images             ProductImage[]

  @@index([brandId])
  @@index([categoryId])
  @@map("Product")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String  @map("product_id")
  url       String
  alt       String?
  position  Int     @default(0)
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@map("ProductImage")
}

/// *
///  * =========================
///  * Órdenes / Cotizaciones
///  * =========================
model Order {
  id             String           @id @default(cuid())
  code           String?          @unique
  clientUserId   String?          @map("client_user_id")
  status         OrderStatus      @default(DRAFT)
  subtotal       Decimal          @default(0)
  taxTotal       Decimal?         @map("tax_total")
  grandTotal     Decimal?         @map("grand_total")
  currency       String           @default("ARS")
  submittedAt    DateTime?        @map("submitted_at")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  quoteEmail     String?          @map("quote_email")
  quoteMessage   String?          @map("quote_message")
  quoteName      String?          @map("quote_name")
  quotePhone     String?          @map("quote_phone")
  quoteCompany   String?          @map("quote_company")
  quoteCuit      String?          @map("quote_cuit")
  sellerUserId   String?          @map("seller_user_id")
  tax            Decimal          @default(0)
  total          Decimal          @default(0)
  type           OrderType        @default(ORDER)
  AnalyticsEvent AnalyticsEvent[]
  clientUser     User?            @relation("ClientOrders", fields: [clientUserId], references: [id])
  sellerUser     User?            @relation("SellerOrders", fields: [sellerUserId], references: [id])
  items          OrderItem[]

  @@index([clientUserId])
  @@index([sellerUserId])
  @@map("Order")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String   @map("order_id")
  productId String?  @map("product_id")
  sku       String?
  name      String
  quantity  Decimal
  unit      String?
  unitPrice Decimal? @map("unit_price")
  taxRate   Decimal? @map("tax_rate")
  subtotal  Decimal?
  total     Decimal?
  order     Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@map("OrderItem")
}

/// *
///  * =========================
///  * SEO - Landing de búsquedas
///  * =========================
model SearchLanding {
  id              String             @id @default(cuid())
  slug            String             @unique
  query           String
  title           String
  metaDescription String?            @map("meta_description")
  isPublished     Boolean            @default(true) @map("is_published")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @default(now()) @map("updated_at")
  hits            SearchLandingHit[]

  @@map("SearchLanding")
}

model SearchLandingHit {
  id        String        @id @default(cuid())
  landingId String        @map("landing_id")
  sessionId String?       @map("session_id")
  userId    String?       @map("user_id")
  referrer  String?
  createdAt DateTime      @default(now()) @map("created_at")
  landing   SearchLanding @relation(fields: [landingId], references: [id])
  user      User?         @relation(fields: [userId], references: [id])

  @@index([landingId])
  @@map("SearchLandingHit")
}

/// *
///  * =========================
///  * Logs de búsqueda / Analítica
///  * =========================
model SearchQueryLog {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  query        String
  resultsCount Int?     @map("results_count")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@map("SearchQueryLog")
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  eventName String   @map("event_name")
  userId    String?  @map("user_id")
  sessionId String?  @map("session_id")
  url       String?
  productId String?  @map("product_id")
  orderId   String?  @map("order_id")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  order     Order?   @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([eventName])
  @@map("AnalyticsEvent")
}

/// *
///  * =========================
///  * Importaciones / Mapeos externos
///  * =========================
model CatalogImport {
  id         String    @id @default(cuid())
  source     String
  fileName   String?   @map("file_name")
  status     String    @default("PENDING")
  summary    Json?
  createdBy  String?   @map("created_by")
  createdAt  DateTime  @default(now()) @map("created_at")
  finishedAt DateTime? @map("finished_at")

  @@map("CatalogImport")
}

model ExternalProductMap {
  externalId String  @map("external_id")
  productId  String  @map("product_id")
  source     String
  product    Product @relation(fields: [productId], references: [id])

  @@id([externalId, source])
  @@map("ExternalProductMap")
}

/// *
///  * =========================
///  * Enums
///  * =========================
enum UserRole {
  ADMIN
  CLIENT
  VENDOR
  SELLER
}

enum OrderType {
  ORDER
  QUOTE
}

enum OrderStatus {
  DRAFT
  SUBMITTED
  APPROVED
  ASSIGNED
  FULFILLED
  SHIPPED
  DELIVERED
  CANCELED
  REJECTED
  CANCELLED
}
